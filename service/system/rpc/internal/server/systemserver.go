// Code generated by goctl. DO NOT EDIT!
// Source: system.proto

package server

import (
	"context"

	"gogoshop/service/system/rpc/internal/logic"
	"gogoshop/service/system/rpc/internal/svc"
	"gogoshop/service/system/rpc/systemclient"
)

type SystemServer struct {
	svcCtx *svc.ServiceContext
	systemclient.UnimplementedSystemServer
}

func NewSystemServer(svcCtx *svc.ServiceContext) *SystemServer {
	return &SystemServer{
		svcCtx: svcCtx,
	}
}

func (s *SystemServer) Login(ctx context.Context, in *systemclient.LoginReq) (*systemclient.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *SystemServer) UserInfo(ctx context.Context, in *systemclient.InfoReq) (*systemclient.InfoResp, error) {
	l := logic.NewUserInfoLogic(ctx, s.svcCtx)
	return l.UserInfo(in)
}

func (s *SystemServer) UserAdd(ctx context.Context, in *systemclient.UserAddReq) (*systemclient.UserAddResp, error) {
	l := logic.NewUserAddLogic(ctx, s.svcCtx)
	return l.UserAdd(in)
}

func (s *SystemServer) UserList(ctx context.Context, in *systemclient.UserListReq) (*systemclient.UserListResp, error) {
	l := logic.NewUserListLogic(ctx, s.svcCtx)
	return l.UserList(in)
}

func (s *SystemServer) UserUpdate(ctx context.Context, in *systemclient.UserUpdateReq) (*systemclient.UserUpdateResp, error) {
	l := logic.NewUserUpdateLogic(ctx, s.svcCtx)
	return l.UserUpdate(in)
}

func (s *SystemServer) UserDelete(ctx context.Context, in *systemclient.UserDeleteReq) (*systemclient.UserDeleteResp, error) {
	l := logic.NewUserDeleteLogic(ctx, s.svcCtx)
	return l.UserDelete(in)
}

func (s *SystemServer) ReSetPassword(ctx context.Context, in *systemclient.ReSetPasswordReq) (*systemclient.ReSetPasswordResp, error) {
	l := logic.NewReSetPasswordLogic(ctx, s.svcCtx)
	return l.ReSetPassword(in)
}

func (s *SystemServer) UpdateUserStatus(ctx context.Context, in *systemclient.UserStatusReq) (*systemclient.UserStatusResp, error) {
	l := logic.NewUpdateUserStatusLogic(ctx, s.svcCtx)
	return l.UpdateUserStatus(in)
}

func (s *SystemServer) RoleAdd(ctx context.Context, in *systemclient.RoleAddReq) (*systemclient.RoleAddResp, error) {
	l := logic.NewRoleAddLogic(ctx, s.svcCtx)
	return l.RoleAdd(in)
}

func (s *SystemServer) RoleList(ctx context.Context, in *systemclient.RoleListReq) (*systemclient.RoleListResp, error) {
	l := logic.NewRoleListLogic(ctx, s.svcCtx)
	return l.RoleList(in)
}

func (s *SystemServer) RoleUpdate(ctx context.Context, in *systemclient.RoleUpdateReq) (*systemclient.RoleUpdateResp, error) {
	l := logic.NewRoleUpdateLogic(ctx, s.svcCtx)
	return l.RoleUpdate(in)
}

func (s *SystemServer) RoleDelete(ctx context.Context, in *systemclient.RoleDeleteReq) (*systemclient.RoleDeleteResp, error) {
	l := logic.NewRoleDeleteLogic(ctx, s.svcCtx)
	return l.RoleDelete(in)
}

func (s *SystemServer) UpdateRoleRole(ctx context.Context, in *systemclient.UpdateRoleRoleReq) (*systemclient.UpdateRoleRoleResp, error) {
	l := logic.NewUpdateRoleRoleLogic(ctx, s.svcCtx)
	return l.UpdateRoleRole(in)
}

func (s *SystemServer) QueryMenuByRoleId(ctx context.Context, in *systemclient.QueryMenuByRoleIdReq) (*systemclient.QueryMenuByRoleIdResp, error) {
	l := logic.NewQueryMenuByRoleIdLogic(ctx, s.svcCtx)
	return l.QueryMenuByRoleId(in)
}

func (s *SystemServer) UpdateMenuRole(ctx context.Context, in *systemclient.UpdateMenuRoleReq) (*systemclient.UpdateMenuRoleResp, error) {
	l := logic.NewUpdateMenuRoleLogic(ctx, s.svcCtx)
	return l.UpdateMenuRole(in)
}

func (s *SystemServer) MenuAdd(ctx context.Context, in *systemclient.MenuAddReq) (*systemclient.MenuAddResp, error) {
	l := logic.NewMenuAddLogic(ctx, s.svcCtx)
	return l.MenuAdd(in)
}

func (s *SystemServer) MenuList(ctx context.Context, in *systemclient.MenuListReq) (*systemclient.MenuListResp, error) {
	l := logic.NewMenuListLogic(ctx, s.svcCtx)
	return l.MenuList(in)
}

func (s *SystemServer) MenuUpdate(ctx context.Context, in *systemclient.MenuUpdateReq) (*systemclient.MenuUpdateResp, error) {
	l := logic.NewMenuUpdateLogic(ctx, s.svcCtx)
	return l.MenuUpdate(in)
}

func (s *SystemServer) MenuDelete(ctx context.Context, in *systemclient.MenuDeleteReq) (*systemclient.MenuDeleteResp, error) {
	l := logic.NewMenuDeleteLogic(ctx, s.svcCtx)
	return l.MenuDelete(in)
}

func (s *SystemServer) DictAdd(ctx context.Context, in *systemclient.DictAddReq) (*systemclient.DictAddResp, error) {
	l := logic.NewDictAddLogic(ctx, s.svcCtx)
	return l.DictAdd(in)
}

func (s *SystemServer) DictList(ctx context.Context, in *systemclient.DictListReq) (*systemclient.DictListResp, error) {
	l := logic.NewDictListLogic(ctx, s.svcCtx)
	return l.DictList(in)
}

func (s *SystemServer) DictUpdate(ctx context.Context, in *systemclient.DictUpdateReq) (*systemclient.DictUpdateResp, error) {
	l := logic.NewDictUpdateLogic(ctx, s.svcCtx)
	return l.DictUpdate(in)
}

func (s *SystemServer) DictDelete(ctx context.Context, in *systemclient.DictDeleteReq) (*systemclient.DictDeleteResp, error) {
	l := logic.NewDictDeleteLogic(ctx, s.svcCtx)
	return l.DictDelete(in)
}

func (s *SystemServer) DeptAdd(ctx context.Context, in *systemclient.DeptAddReq) (*systemclient.DeptAddResp, error) {
	l := logic.NewDeptAddLogic(ctx, s.svcCtx)
	return l.DeptAdd(in)
}

func (s *SystemServer) DeptList(ctx context.Context, in *systemclient.DeptListReq) (*systemclient.DeptListResp, error) {
	l := logic.NewDeptListLogic(ctx, s.svcCtx)
	return l.DeptList(in)
}

func (s *SystemServer) DeptUpdate(ctx context.Context, in *systemclient.DeptUpdateReq) (*systemclient.DeptUpdateResp, error) {
	l := logic.NewDeptUpdateLogic(ctx, s.svcCtx)
	return l.DeptUpdate(in)
}

func (s *SystemServer) DeptDelete(ctx context.Context, in *systemclient.DeptDeleteReq) (*systemclient.DeptDeleteResp, error) {
	l := logic.NewDeptDeleteLogic(ctx, s.svcCtx)
	return l.DeptDelete(in)
}

func (s *SystemServer) LoginLogAdd(ctx context.Context, in *systemclient.LoginLogAddReq) (*systemclient.LoginLogAddResp, error) {
	l := logic.NewLoginLogAddLogic(ctx, s.svcCtx)
	return l.LoginLogAdd(in)
}

func (s *SystemServer) LoginLogList(ctx context.Context, in *systemclient.LoginLogListReq) (*systemclient.LoginLogListResp, error) {
	l := logic.NewLoginLogListLogic(ctx, s.svcCtx)
	return l.LoginLogList(in)
}

func (s *SystemServer) LoginLogDelete(ctx context.Context, in *systemclient.LoginLogDeleteReq) (*systemclient.LoginLogDeleteResp, error) {
	l := logic.NewLoginLogDeleteLogic(ctx, s.svcCtx)
	return l.LoginLogDelete(in)
}

func (s *SystemServer) SystemLogAdd(ctx context.Context, in *systemclient.SystemLogAddReq) (*systemclient.SystemLogAddResp, error) {
	l := logic.NewSystemLogAddLogic(ctx, s.svcCtx)
	return l.SystemLogAdd(in)
}

func (s *SystemServer) SystemLogList(ctx context.Context, in *systemclient.SystemLogListReq) (*systemclient.SystemLogListResp, error) {
	l := logic.NewSystemLogListLogic(ctx, s.svcCtx)
	return l.SystemLogList(in)
}

func (s *SystemServer) SystemLogDelete(ctx context.Context, in *systemclient.SystemLogDeleteReq) (*systemclient.SystemLogDeleteResp, error) {
	l := logic.NewSystemLogDeleteLogic(ctx, s.svcCtx)
	return l.SystemLogDelete(in)
}

func (s *SystemServer) ConfigAdd(ctx context.Context, in *systemclient.ConfigAddReq) (*systemclient.ConfigAddResp, error) {
	l := logic.NewConfigAddLogic(ctx, s.svcCtx)
	return l.ConfigAdd(in)
}

func (s *SystemServer) ConfigList(ctx context.Context, in *systemclient.ConfigListReq) (*systemclient.ConfigListResp, error) {
	l := logic.NewConfigListLogic(ctx, s.svcCtx)
	return l.ConfigList(in)
}

func (s *SystemServer) ConfigUpdate(ctx context.Context, in *systemclient.ConfigUpdateReq) (*systemclient.ConfigUpdateResp, error) {
	l := logic.NewConfigUpdateLogic(ctx, s.svcCtx)
	return l.ConfigUpdate(in)
}

func (s *SystemServer) ConfigDelete(ctx context.Context, in *systemclient.ConfigDeleteReq) (*systemclient.ConfigDeleteResp, error) {
	l := logic.NewConfigDeleteLogic(ctx, s.svcCtx)
	return l.ConfigDelete(in)
}

func (s *SystemServer) UpdateConfigRole(ctx context.Context, in *systemclient.UpdateConfigRoleReq) (*systemclient.UpdateConfigRoleResp, error) {
	l := logic.NewUpdateConfigRoleLogic(ctx, s.svcCtx)
	return l.UpdateConfigRole(in)
}

func (s *SystemServer) JobAdd(ctx context.Context, in *systemclient.JobAddReq) (*systemclient.JobAddResp, error) {
	l := logic.NewJobAddLogic(ctx, s.svcCtx)
	return l.JobAdd(in)
}

func (s *SystemServer) JobList(ctx context.Context, in *systemclient.JobListReq) (*systemclient.JobListResp, error) {
	l := logic.NewJobListLogic(ctx, s.svcCtx)
	return l.JobList(in)
}

func (s *SystemServer) JobUpdate(ctx context.Context, in *systemclient.JobUpdateReq) (*systemclient.JobUpdateResp, error) {
	l := logic.NewJobUpdateLogic(ctx, s.svcCtx)
	return l.JobUpdate(in)
}

func (s *SystemServer) JobDelete(ctx context.Context, in *systemclient.JobDeleteReq) (*systemclient.JobDeleteResp, error) {
	l := logic.NewJobDeleteLogic(ctx, s.svcCtx)
	return l.JobDelete(in)
}

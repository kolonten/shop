// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	systemUserFieldNames          = builder.RawFieldNames(&SystemUser{})
	systemUserRows                = strings.Join(systemUserFieldNames, ",")
	systemUserRowsExpectAutoSet   = strings.Join(stringx.Remove(systemUserFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	systemUserRowsWithPlaceHolder = strings.Join(stringx.Remove(systemUserFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheSystemUserIdPrefix   = "cache:systemUser:id:"
	cacheSystemUserNamePrefix = "cache:systemUser:name:"
)

type (
	systemUserModel interface {
		Insert(ctx context.Context, data *SystemUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SystemUser, error)
		FindOneByName(ctx context.Context, name string) (*SystemUser, error)
		Update(ctx context.Context, data *SystemUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSystemUserModel struct {
		sqlc.CachedConn
		table string
	}

	SystemUser struct {
		Id         int64        `db:"id"`          // 编号
		SiteId     int64        `db:"site_id"`     // 站点ID
		JobId      int64        `db:"job_id"`      // 岗位ID
		DeptId     int64        `db:"dept_id"`     // 机构ID
		Name       string       `db:"name"`        // 用户名
		NickName   string       `db:"nick_name"`   // 昵称
		Avatar     string       `db:"avatar"`      // 头像
		Password   string       `db:"password"`    // 密码
		Salt       string       `db:"salt"`        // 加密盐
		Email      string       `db:"email"`       // 邮箱
		Mobile     string       `db:"mobile"`      // 手机号
		Status     int64        `db:"status"`      // 状态  0：禁用   1：正常
		CreateBy   string       `db:"create_by"`   // 创建人
		UpdateBy   string       `db:"update_by"`   // 更新人
		CreateTime time.Time    `db:"create_time"` // 创建时间
		UpdateTime sql.NullTime `db:"update_time"` // 更新时间
		DeleteTime sql.NullTime `db:"delete_time"` // 删除时间
	}
)

func newSystemUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSystemUserModel {
	return &defaultSystemUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`system_user`",
	}
}

func (m *defaultSystemUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	systemUserIdKey := fmt.Sprintf("%s%v", cacheSystemUserIdPrefix, id)
	systemUserNameKey := fmt.Sprintf("%s%v", cacheSystemUserNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, systemUserIdKey, systemUserNameKey)
	return err
}

func (m *defaultSystemUserModel) FindOne(ctx context.Context, id int64) (*SystemUser, error) {
	systemUserIdKey := fmt.Sprintf("%s%v", cacheSystemUserIdPrefix, id)
	var resp SystemUser
	err := m.QueryRowCtx(ctx, &resp, systemUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", systemUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemUserModel) FindOneByName(ctx context.Context, name string) (*SystemUser, error) {
	systemUserNameKey := fmt.Sprintf("%s%v", cacheSystemUserNamePrefix, name)
	var resp SystemUser
	err := m.QueryRowIndexCtx(ctx, &resp, systemUserNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", systemUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemUserModel) Insert(ctx context.Context, data *SystemUser) (sql.Result, error) {
	systemUserIdKey := fmt.Sprintf("%s%v", cacheSystemUserIdPrefix, data.Id)
	systemUserNameKey := fmt.Sprintf("%s%v", cacheSystemUserNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, systemUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.SiteId, data.JobId, data.DeptId, data.Name, data.NickName, data.Avatar, data.Password, data.Salt, data.Email, data.Mobile, data.Status, data.CreateBy, data.UpdateBy, data.DeleteTime)
	}, systemUserIdKey, systemUserNameKey)
	return ret, err
}

func (m *defaultSystemUserModel) Update(ctx context.Context, newData *SystemUser) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	systemUserIdKey := fmt.Sprintf("%s%v", cacheSystemUserIdPrefix, data.Id)
	systemUserNameKey := fmt.Sprintf("%s%v", cacheSystemUserNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, systemUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.SiteId, newData.JobId, newData.DeptId, newData.Name, newData.NickName, newData.Avatar, newData.Password, newData.Salt, newData.Email, newData.Mobile, newData.Status, newData.CreateBy, newData.UpdateBy, newData.DeleteTime, newData.Id)
	}, systemUserIdKey, systemUserNameKey)
	return err
}

func (m *defaultSystemUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSystemUserIdPrefix, primary)
}

func (m *defaultSystemUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", systemUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSystemUserModel) tableName() string {
	return m.table
}

// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	systemLogFieldNames          = builder.RawFieldNames(&SystemLog{})
	systemLogRows                = strings.Join(systemLogFieldNames, ",")
	systemLogRowsExpectAutoSet   = strings.Join(stringx.Remove(systemLogFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	systemLogRowsWithPlaceHolder = strings.Join(stringx.Remove(systemLogFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheSystemLogIdPrefix = "cache:systemLog:id:"
)

type (
	systemLogModel interface {
		Insert(ctx context.Context, data *SystemLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SystemLog, error)
		Update(ctx context.Context, data *SystemLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSystemLogModel struct {
		sqlc.CachedConn
		table string
	}

	SystemLog struct {
		Id         int64        `db:"id"`          // 编号
		UserName   string       `db:"user_name"`   // 用户名
		Operation  string       `db:"operation"`   // 用户操作
		Method     string       `db:"method"`      // 请求方法
		Params     string       `db:"params"`      // 请求参数
		Time       int64        `db:"time"`        // 执行时长(毫秒)
		Ip         string       `db:"ip"`          // IP地址
		CreateBy   string       `db:"create_by"`   // 创建人
		UpdateBy   string       `db:"update_by"`   // 更新人
		CreateTime time.Time    `db:"create_time"` // 创建时间
		UpdateTime sql.NullTime `db:"update_time"` // 更新时间
		DeleteTime sql.NullTime `db:"delete_time"` // 删除时间
	}
)

func newSystemLogModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSystemLogModel {
	return &defaultSystemLogModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`system_log`",
	}
}

func (m *defaultSystemLogModel) Delete(ctx context.Context, id int64) error {
	systemLogIdKey := fmt.Sprintf("%s%v", cacheSystemLogIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, systemLogIdKey)
	return err
}

func (m *defaultSystemLogModel) FindOne(ctx context.Context, id int64) (*SystemLog, error) {
	systemLogIdKey := fmt.Sprintf("%s%v", cacheSystemLogIdPrefix, id)
	var resp SystemLog
	err := m.QueryRowCtx(ctx, &resp, systemLogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", systemLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemLogModel) Insert(ctx context.Context, data *SystemLog) (sql.Result, error) {
	systemLogIdKey := fmt.Sprintf("%s%v", cacheSystemLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, systemLogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserName, data.Operation, data.Method, data.Params, data.Time, data.Ip, data.CreateBy, data.UpdateBy, data.DeleteTime)
	}, systemLogIdKey)
	return ret, err
}

func (m *defaultSystemLogModel) Update(ctx context.Context, data *SystemLog) error {
	systemLogIdKey := fmt.Sprintf("%s%v", cacheSystemLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, systemLogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserName, data.Operation, data.Method, data.Params, data.Time, data.Ip, data.CreateBy, data.UpdateBy, data.DeleteTime, data.Id)
	}, systemLogIdKey)
	return err
}

func (m *defaultSystemLogModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSystemLogIdPrefix, primary)
}

func (m *defaultSystemLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", systemLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSystemLogModel) tableName() string {
	return m.table
}

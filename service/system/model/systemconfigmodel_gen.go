// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	systemConfigFieldNames          = builder.RawFieldNames(&SystemConfig{})
	systemConfigRows                = strings.Join(systemConfigFieldNames, ",")
	systemConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(systemConfigFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	systemConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(systemConfigFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheSystemConfigIdPrefix = "cache:systemConfig:id:"
)

type (
	systemConfigModel interface {
		Insert(ctx context.Context, data *SystemConfig) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SystemConfig, error)
		Update(ctx context.Context, data *SystemConfig) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSystemConfigModel struct {
		sqlc.CachedConn
		table string
	}

	SystemConfig struct {
		Id          int64        `db:"id"`          // 编号
		Sort        int64        `db:"sort"`        // 排序（升序）
		Value       string       `db:"value"`       // 数据值
		Label       string       `db:"label"`       // 标签名
		Type        string       `db:"type"`        // 类型
		Description string       `db:"description"` // 描述
		Remarks     string       `db:"remarks"`     // 备注信息
		CreateBy    string       `db:"create_by"`   // 创建人
		CreateTime  time.Time    `db:"create_time"` // 创建时间
		UpdateTime  sql.NullTime `db:"update_time"` // 更新时间
		DeleteTime  sql.NullTime `db:"delete_time"` // 删除时间
	}
)

func newSystemConfigModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSystemConfigModel {
	return &defaultSystemConfigModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`system_config`",
	}
}

func (m *defaultSystemConfigModel) Delete(ctx context.Context, id int64) error {
	systemConfigIdKey := fmt.Sprintf("%s%v", cacheSystemConfigIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, systemConfigIdKey)
	return err
}

func (m *defaultSystemConfigModel) FindOne(ctx context.Context, id int64) (*SystemConfig, error) {
	systemConfigIdKey := fmt.Sprintf("%s%v", cacheSystemConfigIdPrefix, id)
	var resp SystemConfig
	err := m.QueryRowCtx(ctx, &resp, systemConfigIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", systemConfigRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemConfigModel) Insert(ctx context.Context, data *SystemConfig) (sql.Result, error) {
	systemConfigIdKey := fmt.Sprintf("%s%v", cacheSystemConfigIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, systemConfigRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Sort, data.Value, data.Label, data.Type, data.Description, data.Remarks, data.CreateBy, data.DeleteTime)
	}, systemConfigIdKey)
	return ret, err
}

func (m *defaultSystemConfigModel) Update(ctx context.Context, data *SystemConfig) error {
	systemConfigIdKey := fmt.Sprintf("%s%v", cacheSystemConfigIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, systemConfigRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Sort, data.Value, data.Label, data.Type, data.Description, data.Remarks, data.CreateBy, data.DeleteTime, data.Id)
	}, systemConfigIdKey)
	return err
}

func (m *defaultSystemConfigModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSystemConfigIdPrefix, primary)
}

func (m *defaultSystemConfigModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", systemConfigRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSystemConfigModel) tableName() string {
	return m.table
}

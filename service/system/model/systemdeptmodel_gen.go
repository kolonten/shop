// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	systemDeptFieldNames          = builder.RawFieldNames(&SystemDept{})
	systemDeptRows                = strings.Join(systemDeptFieldNames, ",")
	systemDeptRowsExpectAutoSet   = strings.Join(stringx.Remove(systemDeptFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	systemDeptRowsWithPlaceHolder = strings.Join(stringx.Remove(systemDeptFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheSystemDeptIdPrefix = "cache:systemDept:id:"
)

type (
	systemDeptModel interface {
		Insert(ctx context.Context, data *SystemDept) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SystemDept, error)
		Update(ctx context.Context, data *SystemDept) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSystemDeptModel struct {
		sqlc.CachedConn
		table string
	}

	SystemDept struct {
		Id         int64        `db:"id"`          // 编号
		Name       string       `db:"name"`        // 机构名称
		ParentId   int64        `db:"parent_id"`   // 上级机构ID，一级机构为0
		Sort       int64        `db:"sort"`        // 排序
		CreateBy   string       `db:"create_by"`   // 创建人
		CreateTime time.Time    `db:"create_time"` // 创建时间
		UpdateTime sql.NullTime `db:"update_time"` // 更新时间
		DeleteTime sql.NullTime `db:"delete_time"` // 删除时间
	}
)

func newSystemDeptModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSystemDeptModel {
	return &defaultSystemDeptModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`system_dept`",
	}
}

func (m *defaultSystemDeptModel) Delete(ctx context.Context, id int64) error {
	systemDeptIdKey := fmt.Sprintf("%s%v", cacheSystemDeptIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, systemDeptIdKey)
	return err
}

func (m *defaultSystemDeptModel) FindOne(ctx context.Context, id int64) (*SystemDept, error) {
	systemDeptIdKey := fmt.Sprintf("%s%v", cacheSystemDeptIdPrefix, id)
	var resp SystemDept
	err := m.QueryRowCtx(ctx, &resp, systemDeptIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", systemDeptRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemDeptModel) Insert(ctx context.Context, data *SystemDept) (sql.Result, error) {
	systemDeptIdKey := fmt.Sprintf("%s%v", cacheSystemDeptIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, systemDeptRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.ParentId, data.Sort, data.CreateBy, data.DeleteTime)
	}, systemDeptIdKey)
	return ret, err
}

func (m *defaultSystemDeptModel) Update(ctx context.Context, data *SystemDept) error {
	systemDeptIdKey := fmt.Sprintf("%s%v", cacheSystemDeptIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, systemDeptRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.ParentId, data.Sort, data.CreateBy, data.DeleteTime, data.Id)
	}, systemDeptIdKey)
	return err
}

func (m *defaultSystemDeptModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSystemDeptIdPrefix, primary)
}

func (m *defaultSystemDeptModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", systemDeptRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSystemDeptModel) tableName() string {
	return m.table
}

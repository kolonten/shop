// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	systemDictFieldNames          = builder.RawFieldNames(&SystemDict{})
	systemDictRows                = strings.Join(systemDictFieldNames, ",")
	systemDictRowsExpectAutoSet   = strings.Join(stringx.Remove(systemDictFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	systemDictRowsWithPlaceHolder = strings.Join(stringx.Remove(systemDictFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheSystemDictIdPrefix = "cache:systemDict:id:"
)

type (
	systemDictModel interface {
		Insert(ctx context.Context, data *SystemDict) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SystemDict, error)
		Update(ctx context.Context, data *SystemDict) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSystemDictModel struct {
		sqlc.CachedConn
		table string
	}

	SystemDict struct {
		Id          int64          `db:"id"`          // 编号
		Value       string         `db:"value"`       // 数据值
		Label       string         `db:"label"`       // 标签名
		Type        string         `db:"type"`        // 类型
		Description string         `db:"description"` // 描述
		Sort        int64          `db:"sort"`        // 排序（升序）
		Remarks     sql.NullString `db:"remarks"`     // 备注信息
		CreateBy    string         `db:"create_by"`   // 创建人
		CreateTime  time.Time      `db:"create_time"` // 创建时间
		UpdateTime  sql.NullTime   `db:"update_time"` // 更新时间
		DeleteTime  sql.NullTime   `db:"delete_time"` // 删除时间
	}
)

func newSystemDictModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSystemDictModel {
	return &defaultSystemDictModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`system_dict`",
	}
}

func (m *defaultSystemDictModel) Delete(ctx context.Context, id int64) error {
	systemDictIdKey := fmt.Sprintf("%s%v", cacheSystemDictIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, systemDictIdKey)
	return err
}

func (m *defaultSystemDictModel) FindOne(ctx context.Context, id int64) (*SystemDict, error) {
	systemDictIdKey := fmt.Sprintf("%s%v", cacheSystemDictIdPrefix, id)
	var resp SystemDict
	err := m.QueryRowCtx(ctx, &resp, systemDictIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", systemDictRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemDictModel) Insert(ctx context.Context, data *SystemDict) (sql.Result, error) {
	systemDictIdKey := fmt.Sprintf("%s%v", cacheSystemDictIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, systemDictRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Value, data.Label, data.Type, data.Description, data.Sort, data.Remarks, data.CreateBy, data.DeleteTime)
	}, systemDictIdKey)
	return ret, err
}

func (m *defaultSystemDictModel) Update(ctx context.Context, data *SystemDict) error {
	systemDictIdKey := fmt.Sprintf("%s%v", cacheSystemDictIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, systemDictRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Value, data.Label, data.Type, data.Description, data.Sort, data.Remarks, data.CreateBy, data.DeleteTime, data.Id)
	}, systemDictIdKey)
	return err
}

func (m *defaultSystemDictModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSystemDictIdPrefix, primary)
}

func (m *defaultSystemDictModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", systemDictRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSystemDictModel) tableName() string {
	return m.table
}
